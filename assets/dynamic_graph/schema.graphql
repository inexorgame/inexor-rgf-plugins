# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
}

"The entity or relation has a description."
interface Base_Describable_Component {
  _c__base__describable: ID
  "The description of an entity or a relation"
  description: String
}

"The entity is licensed."
interface Base_Licensed_Component {
  _c__base__licensed: ID
  "Title, author, source and license. Best practices for attribution: https://wiki.creativecommons.org/wiki/best_practices_for_attribution"
  attribution: String
  "The SPDX license identifier. See: https://spdx.org/licenses/"
  license: String
}

"The entity or relation has a name."
interface Base_Named_Component {
  _c__base__named: ID
  "The name of an entity or a relation"
  name: String
}

"The relations between two entities are ordered using a ordinal number associated with sibling relations"
interface Base_Ordered_Component {
  _c__base__ordered: ID
  "The relation ordinal number associated with sibling relations"
  order: Float
}

"The entity is versioned."
interface Base_Versioned_Component {
  _c__base__versioned: ID
  "The version number. Use semantic versioning. See: https://semver.org/"
  version: String
}

"This components spawns events."
interface Core_Event_Component {
  _c__core__event: ID
  event: String
}

"The label is an hierarchical path with static segments, named parameters and catch-all parameters."
interface Core_Labeled_Component {
  _c__core__labeled: ID
  label: String
}

"Entities have a outbound relations and a inbound relations as well as components and properties "
interface Entity {
  id: ID!
}

"Relations have a outbound entity and a inbound entity as well as components and properties,"
interface Relation {
  instance_id: ID!
  key: ID!
}

"State of type array"
interface State_StateArray_Component {
  _c__state__state_array: ID
  set_state: [String]!
  state: [String]!
}

"State of type boolean"
interface State_StateBoolean_Component {
  _c__state__state_boolean: ID
  set_state: Boolean
  state: Boolean
}

interface State_StateDebuggerDebug_Component {
  _c__state__state_debugger_debug: ID
}

interface State_StateDebuggerTrace_Component {
  _c__state__state_debugger_trace: ID
}

"State of type number"
interface State_StateNumber_Component {
  _c__state__state_number: ID
  set_state: Float
  state: Float
}

"State of type object"
interface State_StateObject_Component {
  _c__state__state_object: ID
  set_state: String
  state: String
}

"State of type string"
interface State_StateString_Component {
  _c__state__state_string: ID
  set_state: String
  state: String
}

interface String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  lhs: String
  result: Boolean
}

interface String_StringComparison_Component {
  _c__string__string_comparison: ID
  lhs: String
  result: Boolean
  rhs: String
}

interface String_StringGate_Component {
  _c__string__string_gate: ID
  lhs: String
  result: String
  rhs: String
}

interface String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  lhs: String
  result: Float
}

interface String_StringOperation_Component {
  _c__string__string_operation: ID
  lhs: String
  result: String
}

interface String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  lhs: String
  result: Float
  rhs: String
}

interface Taxonomy_Weighted_Component {
  _c__taxonomy__weighted: ID
  weight: Float
}

"Value of type array"
interface Value_ValueArray_Component {
  _c__value__value_array: ID
  value: [String]!
}

"Value of type boolean"
interface Value_ValueBoolean_Component {
  _c__value__value_boolean: ID
  value: Boolean
}

interface Value_ValueDebuggerDebug_Component {
  _c__value__value_debugger_debug: ID
}

interface Value_ValueDebuggerTrace_Component {
  _c__value__value_debugger_trace: ID
}

"Value of type number"
interface Value_ValueNumber_Component {
  _c__value__value_number: ID
  value: Float
}

"Value of type object"
interface Value_ValueObject_Component {
  _c__value__value_object: ID
  value: String
}

"Value of type string"
interface Value_ValueString_Component {
  _c__value__value_string: ID
  value: String
}

"Any entity."
union AllEntities = Base_Comment_Entity | Core_Shutdown_Entity | Core_SystemEvent_Entity | Flow_GenericFlow_Entity | State_StateArray_Entity | State_StateBoolean_Entity | State_StateNumber_Entity | State_StateObject_Entity | State_StateString_Entity | String_CamelCase_Entity | String_Capitalize_Entity | String_CharCountGraphemes_Entity | String_CharCount_Entity | String_ChopAfterLast_Entity | String_ChopAfter_Entity | String_ChopBeforeLast_Entity | String_ChopBefore_Entity | String_ChopRemovePrefix_Entity | String_ChopRemoveSuffix_Entity | String_Concat_Entity | String_Contains_Entity | String_CountSubstrings_Entity | String_CountUniqueWords_Entity | String_CountWords_Entity | String_Decapitalize_Entity | String_EndsWith_Entity | String_EscapeHtml_Entity | String_EscapeRegexp_Entity | String_IsAlphaDigit_Entity | String_IsAlpha_Entity | String_IsBlank_Entity | String_IsCamelCase_Entity | String_IsCapitalize_Entity | String_IsDecapitalize_Entity | String_IsDigit_Entity | String_IsEmpty_Entity | String_IsKebabCase_Entity | String_IsLowerFirst_Entity | String_IsLowercase_Entity | String_IsNumeric_Entity | String_IsPascalCase_Entity | String_IsShoutyKebabCase_Entity | String_IsShoutySnakeCase_Entity | String_IsSnakeCase_Entity | String_IsTitleCase_Entity | String_IsTrainCase_Entity | String_IsUpperFirst_Entity | String_IsUppercase_Entity | String_KebabCase_Entity | String_LowerFirst_Entity | String_Lowercase_Entity | String_PascalCase_Entity | String_Reverse_Entity | String_ShoutyKebabCase_Entity | String_ShoutySnakeCase_Entity | String_SnakeCase_Entity | String_StartsWith_Entity | String_StringLength_Entity | String_StripHtmlTags_Entity | String_SwapCase_Entity | String_Templating_Entity | String_TitleCase_Entity | String_TrainCase_Entity | String_TrimEnd_Entity | String_TrimStart_Entity | String_Trim_Entity | String_UnescapeHtml_Entity | String_UpperFirst_Entity | String_Uppercase_Entity | Taxonomy_Category_Entity | Taxonomy_Tag_Entity | Value_ValueArray_Entity | Value_ValueBoolean_Entity | Value_ValueNumber_Entity | Value_ValueObject_Entity | Value_ValueString_Entity

"A simple comment"
type BaseNamespace {
  comment: [Base_Comment_Entity!]!
  describableComponent: [Base_Describable_Component!]!
  licensedComponent: [Base_Licensed_Component!]!
  namedComponent: [Base_Named_Component!]!
  orderedComponent: [Base_Ordered_Component!]!
  versionedComponent: [Base_Versioned_Component!]!
}

"A simple comment"
type Base_Comment_Entity implements Base_Describable_Component & Base_Named_Component & Entity {
  _c__base__describable: ID
  _c__base__named: ID
  "The description of an entity or a relation"
  description: String
  id: ID!
  "The name of an entity or a relation"
  name: String
}

type CoreNamespace {
  eventComponent: [Core_Event_Component!]!
  labeledComponent: [Core_Labeled_Component!]!
  shutdown: [Core_Shutdown_Entity!]!
  systemEvent: [Core_SystemEvent_Entity!]!
}

type Core_Shutdown_Entity implements Core_Labeled_Component & Entity {
  _c__core__labeled: ID
  _c__logical__action: ID
  id: ID!
  label: String
  shutdown: Boolean
  trigger: Boolean
}

"Events of the type system"
type Core_SystemEvent_Entity implements Core_Event_Component & Core_Labeled_Component & Entity {
  _c__core__event: ID
  _c__core__labeled: ID
  event: String
  id: ID!
  label: String
}

"Generic flow without inputs and outputs"
type FlowNamespace {
  genericFlow: [Flow_GenericFlow_Entity!]!
}

"Generic flow without inputs and outputs"
type Flow_GenericFlow_Entity implements Core_Labeled_Component & Entity {
  _c__core__labeled: ID
  id: ID!
  label: String
}

type Query {
  base: BaseNamespace!
  core: CoreNamespace!
  flow: FlowNamespace!
  state: StateNamespace!
  string: StringNamespace!
  taxonomy: TaxonomyNamespace!
  value: ValueNamespace!
}

"State of type string"
type StateNamespace {
  stateArray: [State_StateArray_Entity!]!
  stateArrayComponent: [State_StateArray_Component!]!
  stateBoolean: [State_StateBoolean_Entity!]!
  stateBooleanComponent: [State_StateBoolean_Component!]!
  stateDebuggerDebugComponent: [State_StateDebuggerDebug_Component!]!
  stateDebuggerTraceComponent: [State_StateDebuggerTrace_Component!]!
  stateNumber: [State_StateNumber_Entity!]!
  stateNumberComponent: [State_StateNumber_Component!]!
  stateObject: [State_StateObject_Entity!]!
  stateObjectComponent: [State_StateObject_Component!]!
  stateString: [State_StateString_Entity!]!
  stateStringComponent: [State_StateString_Component!]!
}

"State of type array"
type State_StateArray_Entity implements Base_Named_Component & Entity & State_StateArray_Component & Value_ValueArray_Component {
  _c__base__named: ID
  _c__state__state_array: ID
  _c__value__value_array: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: [String]!
  state: [String]!
  value: [String]!
}

"State of type boolean"
type State_StateBoolean_Entity implements Base_Named_Component & Entity & State_StateBoolean_Component & Value_ValueBoolean_Component {
  _c__base__named: ID
  _c__state__state_boolean: ID
  _c__value__value_boolean: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: Boolean
  state: Boolean
  value: Boolean
}

"State of type number"
type State_StateNumber_Entity implements Base_Named_Component & Entity & State_StateNumber_Component & Value_ValueNumber_Component {
  _c__base__named: ID
  _c__state__state_number: ID
  _c__value__value_number: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: Float
  state: Float
  value: Float
}

"State of type object"
type State_StateObject_Entity implements Base_Named_Component & Entity & State_StateObject_Component & Value_ValueObject_Component {
  _c__base__named: ID
  _c__state__state_object: ID
  _c__value__value_object: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: String
  state: String
  value: String
}

"State of type string"
type State_StateString_Entity implements Base_Named_Component & Entity & State_StateString_Component & Value_ValueString_Component {
  _c__base__named: ID
  _c__state__state_string: ID
  _c__value__value_string: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: String
  state: String
  value: String
}

"Uppercase"
type StringNamespace {
  camelCase: [String_CamelCase_Entity!]!
  capitalize: [String_Capitalize_Entity!]!
  charCount: [String_CharCount_Entity!]!
  charCountGraphemes: [String_CharCountGraphemes_Entity!]!
  chopAfter: [String_ChopAfter_Entity!]!
  chopAfterLast: [String_ChopAfterLast_Entity!]!
  chopBefore: [String_ChopBefore_Entity!]!
  chopBeforeLast: [String_ChopBeforeLast_Entity!]!
  chopRemovePrefix: [String_ChopRemovePrefix_Entity!]!
  chopRemoveSuffix: [String_ChopRemoveSuffix_Entity!]!
  concat: [String_Concat_Entity!]!
  contains: [String_Contains_Entity!]!
  countSubstrings: [String_CountSubstrings_Entity!]!
  countUniqueWords: [String_CountUniqueWords_Entity!]!
  countWords: [String_CountWords_Entity!]!
  decapitalize: [String_Decapitalize_Entity!]!
  endsWith: [String_EndsWith_Entity!]!
  escapeHtml: [String_EscapeHtml_Entity!]!
  escapeRegexp: [String_EscapeRegexp_Entity!]!
  isAlpha: [String_IsAlpha_Entity!]!
  isAlphaDigit: [String_IsAlphaDigit_Entity!]!
  isBlank: [String_IsBlank_Entity!]!
  isCamelCase: [String_IsCamelCase_Entity!]!
  isCapitalize: [String_IsCapitalize_Entity!]!
  isDecapitalize: [String_IsDecapitalize_Entity!]!
  isDigit: [String_IsDigit_Entity!]!
  isEmpty: [String_IsEmpty_Entity!]!
  isKebabCase: [String_IsKebabCase_Entity!]!
  isLowerFirst: [String_IsLowerFirst_Entity!]!
  isLowercase: [String_IsLowercase_Entity!]!
  isNumeric: [String_IsNumeric_Entity!]!
  isPascalCase: [String_IsPascalCase_Entity!]!
  isShoutyKebabCase: [String_IsShoutyKebabCase_Entity!]!
  isShoutySnakeCase: [String_IsShoutySnakeCase_Entity!]!
  isSnakeCase: [String_IsSnakeCase_Entity!]!
  isTitleCase: [String_IsTitleCase_Entity!]!
  isTrainCase: [String_IsTrainCase_Entity!]!
  isUpperFirst: [String_IsUpperFirst_Entity!]!
  isUppercase: [String_IsUppercase_Entity!]!
  kebabCase: [String_KebabCase_Entity!]!
  lowerFirst: [String_LowerFirst_Entity!]!
  lowercase: [String_Lowercase_Entity!]!
  pascalCase: [String_PascalCase_Entity!]!
  reverse: [String_Reverse_Entity!]!
  shoutyKebabCase: [String_ShoutyKebabCase_Entity!]!
  shoutySnakeCase: [String_ShoutySnakeCase_Entity!]!
  snakeCase: [String_SnakeCase_Entity!]!
  startsWith: [String_StartsWith_Entity!]!
  stringBoolOperationComponent: [String_StringBoolOperation_Component!]!
  stringComparisonComponent: [String_StringComparison_Component!]!
  stringGateComponent: [String_StringGate_Component!]!
  stringLength: [String_StringLength_Entity!]!
  stringNumberOperationComponent: [String_StringNumberOperation_Component!]!
  stringOperationComponent: [String_StringOperation_Component!]!
  stringStringNumberGateComponent: [String_StringStringNumberGate_Component!]!
  stripHtmlTags: [String_StripHtmlTags_Entity!]!
  swapCase: [String_SwapCase_Entity!]!
  templating: [String_Templating_Entity!]!
  titleCase: [String_TitleCase_Entity!]!
  trainCase: [String_TrainCase_Entity!]!
  trim: [String_Trim_Entity!]!
  trimEnd: [String_TrimEnd_Entity!]!
  trimStart: [String_TrimStart_Entity!]!
  unescapeHtml: [String_UnescapeHtml_Entity!]!
  upperFirst: [String_UpperFirst_Entity!]!
  uppercase: [String_Uppercase_Entity!]!
}

"Converts the input to camel case"
type String_CamelCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the first character of the input to upper case and convert the rest of the input to lower case"
type String_Capitalize_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Counts the graphemes in the input string taking care of surrogate pairs and combining marks"
type String_CharCountGraphemes_Entity implements Entity & String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

"Counts the characters"
type String_CharCount_Entity implements Entity & String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

"Returns everything after the last given search"
type String_ChopAfterLast_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Returns everything after the given search"
type String_ChopAfter_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Returns everything before the last given search"
type String_ChopBeforeLast_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Returns everything before the given search"
type String_ChopBefore_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Extracts the prefix from the input"
type String_ChopRemovePrefix_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Extracts the suffix from the input"
type String_ChopRemoveSuffix_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Concat"
type String_Concat_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Contains"
type String_Contains_Entity implements Entity & String_StringComparison_Component {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Counts the number of substring appearances in the input string"
type String_CountSubstrings_Entity implements Entity & String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

"Counting occurrences of unique words in the input string. This function respects unicode"
type String_CountUniqueWords_Entity implements Entity & String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

"Counts the number of words in the input string"
type String_CountWords_Entity implements Entity & String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

"Converts the first character of the input to lower case and convert the rest of the input to lower case"
type String_Decapitalize_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Ends With"
type String_EndsWith_Entity implements Entity & String_StringComparison_Component {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Escapes HTML special characters"
type String_EscapeHtml_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Escapes the regular expression special characters"
type String_EscapeRegexp_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Checks whether the input string contains contains only alpha and digit characters"
type String_IsAlphaDigit_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string contains only alpha characters"
type String_IsAlpha_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is empty or contains only whitespaces"
type String_IsBlank_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is camelCased"
type String_IsCamelCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is capitalized and the rest of the input string is lower case"
type String_IsCapitalize_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is decapitalized and the rest of the input string is converted to lower case"
type String_IsDecapitalize_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string contains only digit characters"
type String_IsDigit_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is empty"
type String_IsEmpty_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is kebab-cased"
type String_IsKebabCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has the first character in lower case"
type String_IsLowerFirst_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has only lower case characters"
type String_IsLowercase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is numeric"
type String_IsNumeric_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is PascalCased"
type String_IsPascalCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is SHOUTY-KEBAB-CASED"
type String_IsShoutyKebabCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is SHOUTY_SNAKE_CASED"
type String_IsShoutySnakeCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is snake_cased"
type String_IsSnakeCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is a titlecased string and there is at least one character"
type String_IsTitleCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is Train-Cased"
type String_IsTrainCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has the first character in upper case"
type String_IsUpperFirst_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has only upper case characters"
type String_IsUppercase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Converts the input to kebab case"
type String_KebabCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the first character of the input to lower case"
type String_LowerFirst_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Lowercase"
type String_Lowercase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the input to pascal case"
type String_PascalCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Reverses the given string"
type String_Reverse_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the input to SHOUTY kebab case"
type String_ShoutyKebabCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the title to SHOUTY snake case"
type String_ShoutySnakeCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the subject to snake case"
type String_SnakeCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Starts With"
type String_StartsWith_Entity implements Entity & String_StringComparison_Component {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Returns the length of the input string"
type String_StringLength_Entity implements Entity & String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

"Strips all HTML tags"
type String_StripHtmlTags_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the uppercase alpha characters of the input to lowercase and lowercase characters to uppercase"
type String_SwapCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Renders a template"
type String_Templating_Entity implements Entity {
  context: String
  id: ID!
  result: String
  template: String
}

"Converts the input to title case"
type String_TitleCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the input to train case"
type String_TrainCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Trim  End"
type String_TrimEnd_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Trim  Start"
type String_TrimStart_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Trim"
type String_Trim_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Unescapes HTML special characters"
type String_UnescapeHtml_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the first character of the title to upper case"
type String_UpperFirst_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Uppercase"
type String_Uppercase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"The outbound entity is tagged with the inbound tag"
type TaxonomyNamespace {
  categorizedAs: [Taxonomy_CategorizedAs_Relation!]!
  category: [Taxonomy_Category_Entity!]!
  hasSubcategory: [Taxonomy_HasSubcategory_Relation!]!
  tag: [Taxonomy_Tag_Entity!]!
  taggedWith: [Taxonomy_TaggedWith_Relation!]!
  weightedComponent: [Taxonomy_Weighted_Component!]!
}

"The outbound entity is categorized as the inbound category"
type Taxonomy_CategorizedAs_Relation implements Relation & Taxonomy_Weighted_Component {
  _c__taxonomy__weighted: ID
  "The entity which is categorized."
  categorized_entity: AllEntities!
  "The category."
  category: Taxonomy_Category_Entity!
  instance_id: ID!
  key: ID!
  weight: Float
}

"A category is a fundamental and distinct class to which entities or concepts belong"
type Taxonomy_Category_Entity implements Base_Describable_Component & Base_Named_Component & Entity {
  _c__base__describable: ID
  _c__base__named: ID
  "The relations between the category and the categorized entities."
  categorized_as: [Taxonomy_CategorizedAs_Relation!]!
  "The category categorizes these entities."
  categorizes: [AllEntities!]!
  "The description of an entity or a relation"
  description: String
  "The parent categories."
  has_parent_categories: [Taxonomy_HasSubcategory_Relation!]!
  "The sub categories."
  has_sub_categories: [Taxonomy_HasSubcategory_Relation!]!
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The parent categories."
  parent_categories: [Taxonomy_Category_Entity!]!
  "The sub categories."
  sub_categories: [Taxonomy_Category_Entity!]!
}

"The outbound category has the inbound entity as sub category"
type Taxonomy_HasSubcategory_Relation implements Relation & Taxonomy_Weighted_Component {
  _c__taxonomy__weighted: ID
  instance_id: ID!
  key: ID!
  "The parent category."
  parent_category: Taxonomy_Category_Entity!
  "The sub category."
  sub_category: Taxonomy_Category_Entity!
  weight: Float
}

"A tag is a piece of information that describes the data or content that it is assigned to. Tags are nonhierarchical keywords used for Internet bookmarks, digital images, videos, files and so on. A tag doesn't carry any information or semantics itself."
type Taxonomy_Tag_Entity implements Base_Named_Component & Core_Labeled_Component & Entity {
  _c__base__named: ID
  _c__core__labeled: ID
  id: ID!
  label: String
  "The name of an entity or a relation"
  name: String
  "Entities which are tagged by this tag."
  tagged_entities: [AllEntities!]!
  "The weighted relations between the tag and the tagged entities."
  tags_entities: [Taxonomy_TaggedWith_Relation!]!
}

"The outbound entity is tagged with the inbound tag"
type Taxonomy_TaggedWith_Relation implements Core_Labeled_Component & Relation & Taxonomy_Weighted_Component {
  _c__core__labeled: ID
  _c__taxonomy__weighted: ID
  instance_id: ID!
  key: ID!
  label: String
  "The tag."
  tag: Taxonomy_Tag_Entity!
  "The entity which is tagged."
  tagged_entity: AllEntities!
  weight: Float
}

"Value of type string"
type ValueNamespace {
  valueArray: [Value_ValueArray_Entity!]!
  valueArrayComponent: [Value_ValueArray_Component!]!
  valueBoolean: [Value_ValueBoolean_Entity!]!
  valueBooleanComponent: [Value_ValueBoolean_Component!]!
  valueDebuggerDebugComponent: [Value_ValueDebuggerDebug_Component!]!
  valueDebuggerTraceComponent: [Value_ValueDebuggerTrace_Component!]!
  valueNumber: [Value_ValueNumber_Entity!]!
  valueNumberComponent: [Value_ValueNumber_Component!]!
  valueObject: [Value_ValueObject_Entity!]!
  valueObjectComponent: [Value_ValueObject_Component!]!
  valueString: [Value_ValueString_Entity!]!
  valueStringComponent: [Value_ValueString_Component!]!
}

"Value of type array"
type Value_ValueArray_Entity implements Base_Named_Component & Entity & Value_ValueArray_Component {
  _c__base__named: ID
  _c__value__value_array: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: [String]!
}

"Value of type boolean"
type Value_ValueBoolean_Entity implements Base_Named_Component & Entity & Value_ValueBoolean_Component {
  _c__base__named: ID
  _c__value__value_boolean: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: Boolean
}

"Value of type number"
type Value_ValueNumber_Entity implements Base_Named_Component & Entity & Value_ValueNumber_Component {
  _c__base__named: ID
  _c__value__value_number: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: Float
}

"Value of type object"
type Value_ValueObject_Entity implements Base_Named_Component & Entity & Value_ValueObject_Component {
  _c__base__named: ID
  _c__value__value_object: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: String
}

"Value of type string"
type Value_ValueString_Entity implements Base_Named_Component & Entity & Value_ValueString_Component {
  _c__base__named: ID
  _c__value__value_string: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: String
}
