# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"Components are composable parts which can be used by types (entity type, relation type)."
type Component {
  "Textual description of the component."
  description: String!
  "Query which entity types are using this component"
  entityTypes: [EntityType!]!
  "The extensions which are defined by the component."
  extensions(name: String): [Extension!]!
  "Query which relation types are using this component as inbound type"
  inboundOf: [RelationType!]!
  "The name of the component."
  name: String!
  "Query which relation types are using this component as outbound type"
  outboundOf: [RelationType!]!
  "The properties which are applied on entity or relation instances."
  properties(name: String): [PropertyType!]!
  "Query which relation types are using this component"
  relationTypes: [RelationType!]!
}

"""

Entity instances represents an typed objects which contains properties.

The entity type defines the properties (name, data type and socket type).

In contrast to the entity type the entity instance stores values in it's
properties.
"""
type EntityInstance {
  """

  List of behaviours which have been actually applied on the entity instance including
  behaviours which have been applied after creation.
  """
  behaviours: [String!]!
  """

  List of components which have been actually applied on the entity instance including
  components which have been added after creation.
  """
  components: [String!]!
  "The description of the entity instance."
  description: String!
  "The unique identifier of the entity instance."
  id: UUID!
  "List of relation instances which ends at this entity instance."
  inbound(
    "The inbound relation type"
    type: String
  ): [RelationInstance!]!
  "The label of the entity instance if available."
  label: String
  "List of relation instances which starts at this entity instance."
  outbound(
    "The outbound relation type"
    type: String
  ): [RelationInstance!]!
  """

  The properties of then entity instance.

  Each property is represented by it's name (String) and it's value. The value is
  a representation of a JSON. Therefore the value can be boolean, number, string,
  array or an object. For more information about the data types please look at
  https://docs.serde.rs/serde_json/value/enum.Value.html
  """
  properties(
    "Filters by property name"
    name: String,
    "Filters by property names"
    names: [String!]
  ): [PropertyInstance!]!
  "The entity type of the entity instance."
  type: EntityType
}

"Entity types defines the type of entity instance."
type EntityType {
  "The components of the entity type."
  components: [Component!]!
  "Textual description of the entity type."
  description: String!
  "The extensions which are defined by the entity type."
  extensions(name: String): [Extension!]!
  "The entity type belongs to the given group of entity types."
  group: String!
  "List of relation types which has this entity type as inbound."
  inboundRelations: [RelationType!]!
  """

  The name of the entity type.

  The name is the unique identifier for entity types.
  """
  name: String!
  "List of relation types which has this entity type as outbound."
  outboundRelations: [RelationType!]!
  """

  The properties / property types which are defined by the entity type or
  by one of the components.
  """
  properties(name: String): [PropertyType!]!
}

"""

An extension provides named but schema-less additional information.
Entity types, relation types and property types can provide additional
meta data. For example an extension named "shape" provides information
about the look and feel in the flow editor.
"""
type Extension {
  "The additional information as JSON representation (schema-less)."
  extension: JSON!
  "The name of the extension."
  name: String!
}

"""

A flow is a container for entity instances and relation instances.

A flow is strictly associated with a wrapper entity instance. The properties
of the wrapper entity instance are the properties of the flow.

Additionally, flows can be nested -  from the perspective of the outer flow
the inner flow acts like an entity instance. The wrapper entity instance of
the inner flow is the interface which can be accessed by the outer flow.

Entity instances and relation instances can be shared with multiple flows.

It's even possible to connect entity instances from different flows with relation
instances.
"""
type Flow {
  "The entity instances contained by this flow."
  entities: [EntityInstance!]!
  """

  The id of the flow corresponds to the id of the wrapper entity instance

  This means the vector of entity instances must contain an instance with
  the id of the flow.
  """
  id: UUID!
  "The label of the entity instance if available."
  label: String
  "The relation instances contained by this flow."
  relations: [RelationInstance!]!
  "The (entity-) type of the flow."
  type: EntityType
  "The entity instance which is the wrapper for this flow."
  wrapper: EntityInstance
}

"Search for instances"
type Instances {
  """

  Search for entity instances.

  If an id is given, the entity instance with the given id will be returned.

  If an entity type is given, only entity instances of the given type are returned.
  """
  entities(
    "Filters the entity instances by applied behaviours."
    behaviours: [String!],
    "Filters the entity instances by applied components."
    components: [String!],
    "Returns only the entity instance with the given id."
    id: UUID,
    "Returns the entity instance with the given label."
    label: String,
    "Query by properties."
    properties: [PropertyInstanceDefinition!],
    "Filters the entity instances by type."
    type: String
  ): [EntityInstance!]!
  """

  Search for relations instances.

  Relation instances can be searched by relation type name, the entity type of the outbound
  entity instance, the entity type of the inbound entity instance, the id of the outbound
  entity instance or the id of the inbound entity instance. All of these filters can be
  combined.
  """
  relations(
    "Filters the relation instances by applied behaviours."
    behaviours: [String!],
    "Filters the relation instances by applied components."
    components: [String!],
    "Filters the relation instances by the id of the inbound entity instance"
    inboundId: UUID,
    "Filters the relation instances by the entity type of the inbound entity instance"
    inboundType: String,
    "Filters the relation instances by the id of the outbound entity instance"
    outboundId: UUID,
    "Filters the relation instances by the entity type of the outbound entity instance"
    outboundType: String,
    "Query by properties."
    properties: [PropertyInstanceDefinition!],
    "Filters the relation instances by relation type"
    type: String
  ): [RelationInstance!]!
}

"Mutations for the type system, the instances and the flows."
type Mutation {
  "Mutations for flows and their contained instances."
  flows: MutationFlows!
  "Mutations for instances (entity instances, relation instances)."
  instances: MutationInstances!
  "Mutations for types (components, entity types, relation types)."
  types: MutationTypes!
}

"Mutations for components"
type MutationComponents {
  "Creates a new component with the given name and properties."
  create(name: String!, properties: [PropertyTypeDefinition!]): Component!
  delete(name: String!): Boolean!
}

"Mutation of entity instances."
type MutationEntityInstances {
  """

  Creates a new entity instance of the given type.

  The entity type must exist.

  Optionally, an UUID can be specified. If no UUID is specified one will be generated
  randomly.

  The given properties consists of a list of pairs of property name and property value.
  If properties are not provided, default values will be used depending on the data type
  of the property.
  """
  create(
    "Creates the entity instance with the given components."
    components: [String!],
    "The id of the entity instance. If none is given a random uuid will be generated."
    id: UUID,
    properties: [PropertyInstanceDefinition!],
    "The entity type."
    type: String!
  ): EntityInstance!
  "Deletes an entity instance."
  delete(
    "If true, all relations to and from the entity instance will be deleted as well"
    deleteRelations: Boolean,
    "The id of the entity instance"
    id: UUID!
  ): Boolean!
  """

  Manually tick the entity instance. This means for each property of the entity instance
  the corresponding reactive stream will be activated with it's last value.

  This leads to a recalculation if the entity instance is controlled by an behaviour which
  consumes the reactive streams.

  Furthermore this leads to a new value propagation if the output property is connected
  to other properties.
  """
  tick(id: UUID!): EntityInstance!
  "Updates the properties of the entity instance with the given id."
  update(
    "Updates the entity instance with the given label."
    addComponents: [String!],
    "Updates the entity instance with the given id."
    id: UUID,
    "Updates the entity instance with the given label."
    label: String,
    "Updates the given properties"
    properties: [PropertyInstanceDefinition!],
    "Updates the entity instance with the given label."
    removeComponents: [String!]
  ): EntityInstance!
}

"Mutations for entity types"
type MutationEntityTypes {
  "Creates a new entity type with the given name and components and properties."
  create(
    components: [String!],
    "The extension on the entity type."
    extensions: [ExtensionDefinition!],
    "The entity type belongs to this group."
    group: String,
    "The name of the entity type."
    name: String!,
    "The definitions of properties. These are added additionally to the properties provided by the given components."
    properties: [PropertyTypeDefinition!]
  ): EntityType!
  "Deletes the entity type with the given name."
  delete(name: String!): Boolean!
}

"Mutations for flows and their contained instances."
type MutationFlows {
  "Adds an existing entity instance by id to the given flow by id"
  addEntity(entityId: UUID!, flowId: UUID!): Flow!
  "Adds an existing relation instance by edge_key to the given flow by id"
  addRelation(edgeKey: EdgeKeyDefinition!, flowId: UUID!): Flow!
  """

  Manually ticks all entity instances and relation instances of this flow. This means, for
  each property of each entity instance and relation instance the corresponding reactive
  stream will be activated with it's last value.

  This leads to a recalculation if the instance is controlled by an behaviour which
  consumes the reactive streams.

  In case of entity instances, it furthermore leads to a new value propagation if the output
  property is connected to other properties.
  """
  commit(id: UUID!): Flow!
  """

  Creates a new flow and a corresponding wrapper entity instance.

  The given entity type must exist. It provides the properties for the wrapper entity instance
  and therefore defines which properties of the flow are the inputs and outputs.

  Optionally, an UUID can be specified.

  Optionally, the initial values of the properties can be specified. Specified properties
  which are not provided by the given entity type are lacking of a definition (data type,
  socket type).
  """
  create(flowId: UUID, properties: [PropertyInstanceDefinition!], type: String!): Flow!
  "Creates a new entity instance and adds the entity instance to the given flow by id."
  createEntity(entityId: UUID, flowId: UUID!, properties: [PropertyInstanceDefinition!], type: String!): Flow!
  "Creates a new relation instance and adds the relation instance to the given flow by id."
  createRelation(edgeKey: EdgeKeyDefinition!, flowId: UUID!, properties: [PropertyInstanceDefinition!]): Flow!
  """

  Imports the given flow. Creates entity instances and relation instances which are contained
  in the given flow.
  """
  import(flow: FlowDefinition!): Flow!
  "Removes an entity instance from flow."
  removeEntity(entityId: UUID!, flowId: UUID!): Flow!
  "Removes an existing relation instance by edge_key from the given flow by id"
  removeRelation(edgeKey: EdgeKeyDefinition!, flowId: UUID!): Flow!
}

"Mutations on instances."
type MutationInstances {
  "Mutations on entity instances."
  entities: MutationEntityInstances!
  "Mutations on relation instances."
  relations: MutationRelationInstances!
}

"Mutation of relation instances."
type MutationRelationInstances {
  """

  Creates a new relation instance with the given edge_key.

  The edge key is the primary key of a relation instance and consists of the id of the
  outbound entity instance, the name of the relation type and the id of the inbound
  entity instance.

  The relation type must exist and the given type name is matched by a prefix search.
  For example a given type name "default_connector--property_name--property_name" will match
  as relation type "default_connector".

  Furthermore the outbound and the inbound entity instance must exist.

  The given properties consists of a list of pairs of property name and property value.
  If properties are not provided, default values will be used depending on the data type
  of the property.
  """
  create(
    "Creates the relation instance with the given components."
    components: [String!],
    edgeKey: EdgeKeyDefinition!,
    properties: [PropertyInstanceDefinition!]
  ): RelationInstance!
  "Deletes an relation instance."
  delete(edgeKey: EdgeKeyDefinition!): Boolean!
  """

  Manually tick the relation instance. This means for each property of the entity instance
  the corresponding reactive stream will be activated with it's last value.

  This leads to a recalculation if the relation instance is controlled by an behaviour which
  consumes the reactive streams.

  In case of the default_connector it does NOT lead to a new value propagation, because the
  reactive streams are not consumed by the default_connector behaviour.
  """
  tick(edgeKey: EdgeKeyDefinition!): RelationInstance!
  "Updates the properties of the given relation instance by edge key."
  update(
    "Adds the components with the given name"
    addComponents: [String!],
    edgeKey: EdgeKeyDefinition!,
    "Updates the given properties"
    properties: [PropertyInstanceDefinition!],
    "Removes the components with the given name"
    removeComponents: [String!]
  ): RelationInstance!
}

"Mutations for relation types"
type MutationRelationTypes {
  """

  Creates a new relation type with the given name and components and properties.

  The outbound entity type and the inbound entity type must be specified.
  """
  create(
    "Adds the given components to the newly created relation type."
    components: [String!],
    "The extension on the relation type."
    extensions: [ExtensionDefinition!],
    inboundType: String!,
    "The name of the entity type."
    name: String!,
    outboundType: String!,
    "The definitions of properties. These are added additionally to the properties provided by the given components."
    properties: [PropertyTypeDefinition!]
  ): RelationType!
  "Deletes the relation type with the given name."
  delete(name: String!): Boolean!
}

"Mutations for types (components, entity types, relation types)."
type MutationTypes {
  "Mutations for components"
  components: MutationComponents!
  "Mutations for entity types"
  entities: MutationEntityTypes!
  "Mutations for relation types"
  relations: MutationRelationTypes!
}

"""

The named property stores a value/document as JSON representation.

Each property is represented by it's name (String) and it's value. The value is
a representation of a JSON value/document. Therefore the value can be boolean,
number, string, array or an object. For more information about the data types
please look at https://docs.serde.rs/serde_json/value/enum.Value.html
"""
type PropertyInstance {
  "The name of the property."
  name: String!
  "The type of the property."
  type: PropertyType
  "The value of the property as JSON representation."
  value: JSON!
}

"""

Property types defines the type of a property instance.
The property type defines the name, the data type and
the socket type of a property. A property type does not
contain any value.
"""
type PropertyType {
  "The data type of the property instances."
  dataType: DataType!
  "Textual description of the component."
  description: String!
  "The extensions which are defined by the entity type."
  extensions(name: String): [Extension!]!
  "The name of the component."
  name: String!
  "The socket type of the property instances."
  socketType: SocketType!
}

"Search queries for the type system, the instances and the flows."
type Query {
  "Search for flows and their contained instances."
  flows(
    "Filters by the id of the flow"
    id: UUID,
    "Filters by the label of the flow"
    label: String,
    "Filters by the flow type"
    type: String
  ): [Flow!]!
  "Search for instances (entity instances, relation instances)."
  instances: Instances!
  "Search for types (components, entity types, relation types)."
  types: Types!
}

"""

Relation instances are edges from an outbound entity instance to an
inbound entity instance.

The relation instance is of a relation type. The relation type defines
the entity types of the outbound entity instance and the inbound entity
instance. Furthermore the relation type defines which properties
(name, data type, socket type) a relation instance have to have.

In contrast to the relation type, the relation instance stores values/
documents in it's properties.
"""
type RelationInstance {
  """

  List of behaviours which have been actually applied on the relation instance including
  behaviours which have been applied after creation.
  """
  behaviours: [String!]!
  """

  List of components which have been actually applied on the relation instance including
  components which have been added after creation.
  """
  components: [String!]!
  "Textual description of the relation instance."
  description: String!
  """

  The inbound entity instance.

  You can use this in order to navigate from the inbound entity instance to the outbound
  entity instance or vice versa.
  """
  inbound: EntityInstance!
  """

  The outbound entity instance.

  You can use this in order to navigate from the outbound entity instance to the inbound
  entity instance or vice versa.
  """
  outbound: EntityInstance!
  """

  The properties of then relation instance.

  Each property is represented by it's name (String) and it's value. The value is
  a representation of a JSON. Therefore the value can be boolean, number, string,
  array or an object. For more information about the data types please look at
  https://docs.serde.rs/serde_json/value/enum.Value.html
  """
  properties(
    "Filters by property name."
    name: String,
    "Filters by property names"
    names: [String!]
  ): [PropertyInstance!]!
  "The relation type."
  type: RelationType
}

"""

A relation type defines the type of an relation instance.

The relation type defines the entity types of the outbound and inbound entity instances.
Also the relation type defines the properties of the relation instance.
"""
type RelationType {
  "The relation type composes it's properties by these components."
  components: [Component!]!
  "Textual description of the relation type."
  description: String!
  "The extensions which are defined by the relation type."
  extensions(name: String): [Extension!]!
  """

  The full name of the relation type.

  Returns "default_connector__property_name__property_name" (with type suffix).
  """
  fullName: String!
  "The relation type belongs to the given group of relation types."
  group: String!
  "The inbound components."
  inboundComponents: [Component!]!
  "The inbound entity type(s)."
  inboundTypes: [EntityType!]!
  """

  The name of the relation type.

  The name is the unique identifier for relation types.

  Returns "default_connector" for "default_connector__property_name__property_name"
  (without type suffix).
  """
  name: String!
  "The outbound components."
  outboundComponents: [Component!]!
  "The outbound entity type(s)."
  outboundTypes: [EntityType!]!
  """

  The properties / property types which are defined by the relation type or
  by one of the components.
  """
  properties(name: String): [PropertyType!]!
}

"Subscriptions for the reactive property instances."
type Subscription {
  entity(
    "The uuid of the entity instance"
    id: UUID,
    "The label of the entity instance"
    label: String,
    "The name of the property"
    propertyName: String!
  ): PropertyInstance!
  relation(
    edgeKey: EdgeKeyDefinition!,
    "The name of the property"
    propertyName: String!
  ): PropertyInstance!
}

"Search for types (components, entity types or relation types)"
type Types {
  """

  Search for components

  Optionally the list of components can be filtered by name.
  """
  components(
    "Filters by the name of the components"
    name: String,
    "Searches by the name of the components. Allowed wildcards are: ? and *"
    search: String
  ): [Component!]!
  """

  Search for entity types.

  Optionally the list of entity types can be filtered by name.
  """
  entities(
    "Filters by the name of the entity type"
    name: String,
    "Searches by the name of the entity types. Allowed wildcards are: ? and *"
    search: String
  ): [EntityType!]!
  "Search for relation types."
  relations(
    "Filters by inbound entity type"
    inboundType: String,
    "Filters by the name of the relation type"
    name: String,
    "Filters by outbound entity type"
    outboundType: String,
    "Searches by the name of the relation types. Allowed wildcards are: ? and *"
    search: String
  ): [RelationType!]!
}

"""

The data types of a value.

Derived from serde_json::Value but without value payload.
"""
enum DataType {
  "Represents any type (relations)."
  ANY
  "Represents a JSON array."
  ARRAY
  "Represents a JSON boolean."
  BOOL
  "Represents a JSON null value."
  NULL
  "Represents a JSON number, whether integer or floating point."
  NUMBER
  "Represents a JSON object."
  OBJECT
  "Represents a JSON string."
  STRING
}

"""

The socket type defines if the property acts as an input or output socket
or is an hidden property
"""
enum SocketType {
  "The property acts as input socket and accepts incoming connections."
  INPUT
  "The property doesn't act as input or output socket."
  NONE
  "The property acts as output socket and accepts outgoing connections."
  OUTPUT
}

"A scalar that can represent any JSON value."
scalar JSON

"""

A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as Strings
within GraphQL. UUIDs are used to assign unique identifiers to entities without requiring a central
allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

"""

The primary key of an edge consists of the outbound id, the
type name and the inbound id.
"""
input EdgeKeyDefinition {
  "The id of the inbound entity instance."
  inboundId: UUID!
  "The id of the outbound entity instance."
  outboundId: UUID!
  "The name of the relation type."
  typeName: String!
}

"""

Entity instances represents an typed object which contains properties.

The entity type defines the properties (name, data type and socket type).

In contrast to the entity type the entity instance stores values in it's
properties.
"""
input EntityInstanceDefinition {
  "The description of the entity instance."
  description: String!
  "The unique identifier of the entity instance."
  id: UUID!
  """

  The properties of then entity instance.

  Each property is represented by it's name (String) and it's value. The value is
  a representation of a JSON. Therefore the value can be boolean, number, string,
  array or an object. For more information about the data types please look at
  https://docs.serde.rs/serde_json/value/enum.Value.html
  """
  properties: [PropertyInstanceDefinition!]!
  "The name of the entity type."
  type: String!
}

input ExtensionDefinition {
  "The extension as JSON representation."
  extension: JSON!
  "The name of the extension."
  name: String!
}

"""

Represents a flow with entity instances and relation instances.

The entity type of the flow and the entity types of each provided entity instance must exist.
The relation types of each provided relation instance must exist.
"""
input FlowDefinition {
  "Textual description of the flow."
  description: String!
  """

  The entity instances which are contained in this flow.

  It can't have a default because the wrapper entity instance must be
  present in the list of entities.
  """
  entityInstances: [EntityInstanceDefinition!]!
  """

  The id of the flow corresponds to the id of the wrapper entity instance

  This means the vector of entity instances must contain an instance with
  the id of the flow.
  """
  id: UUID!
  "The name of the flow."
  name: String!
  "The relation instances which are contained in this flow."
  relationInstances: [RelationInstanceDefinition!]!
  "The name of the entity type."
  type: String!
}

input PropertyInstanceDefinition {
  "The name of the property."
  name: String!
  "The value of the property as JSON representation."
  value: JSON!
}

input PropertyTypeDefinition {
  "The data type of the property"
  dataType: DataType!
  "The description of the property"
  description: String!
  "Property specific extensions"
  extensions: [ExtensionDefinition!]!
  "The name of the property"
  name: String!
  "Specifies which type of socket"
  socketType: SocketType!
}

"""

Relation instances are edges from an outbound entity instance to an
inbound entity instance.

The relation instance is of a relation type. The relation type defines
the entity types of the outbound entity instance and the inbound entity
instance. Furthermore the relation type defines which properties
(name, data type, socket type) a relation instance have to have.

In constrast to the relation type, the relation instance stores values/
documents in it's properties.
"""
input RelationInstanceDefinition {
  "Textual description of the relation instance."
  description: String!
  "The id of the inbound vertex."
  inboundId: UUID!
  "The id of the outbound vertex."
  outboundId: UUID!
  """

  The properties of then relation instance.

  Each property is represented by it's name (String) and it's value. The value is
  a representation of a JSON. Therefore the value can be boolean, number, string,
  array or an object. For more information about the data types please look at
  https://docs.serde.rs/serde_json/value/enum.Value.html
  """
  properties: [PropertyInstanceDefinition!]!
  "The name of the relation type"
  type: String!
}
